#pragma kernel CSMain

Texture2D<float4> Source;
RWTexture2D<float4> Destination;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

float3 _Light;
bool positionLight;

static const float maxDistance = 80;
static const float eps = 0.001f;
static const float shadowBias = eps * 50;

struct Shape 
{   
    float3 position;
    float3 size;
    float3 color;
    int shapeType;
    int operation;
    float blendStrength;
    int numChildren;
};

StructuredBuffer<Shape> shapes;
int numShapes;


struct Ray 
{
    float3 origin;
    float3 direction;
};

float SphereDistance(float3 eye, float3 centre, float radius) 
{
    return distance(eye, centre) - radius;
}

float CubeDistance(float3 eye, float3 centre, float3 size) 
{
    float3 o = abs(eye - centre) - size;
    float ud = length(max(o, 0));
    float n = max(max(min(o.x, 0), min(o.y, 0)), min(o.z, 0));

    return ud + n;
}

Ray create_ray(float3 origin, float3 direction) 
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;

    return ray;
}

Ray trace_ray(float2 uv) 
{
    float3 origin = mul(_CameraToWorld, float4(0, 0, 0, 1)).xyz;
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0, 1)).xyz;
    direction = mul(_CameraToWorld, float4(direction,0)).xyz;
    direction = normalize(direction);

    return create_ray(origin, direction);
}

float4 Blend(float a, float b, float3 colPrime, float3 colSec, float k)
{
    float h = clamp(0.5 + 0.5 * (b - a)/k, 0.0, 1.0);
    float blendDst = lerp( b, a, h ) - k * h * (1.0 - h);
    float3 blendCol = lerp(colSec, colPrime, h);

    return float4(blendCol, blendDst);
}

float4 Combine(float dstPrime, float dstSec, float3 colPrime, float3 colSec, int operation, float blendStrength) 
{
    float dst = dstPrime;
    float3 color = colPrime;

    if (operation == 0) 
    {
        if (dstSec < dstPrime) 
        {
            dst = dstSec;
            color = colSec;
        }
    } 
    // Blend
    else if (operation == 1) 
    {
        float4 blend = Blend(dstPrime, dstSec, colPrime, colSec, blendStrength);
        dst = blend.w;
        color = blend.xyz;
    }
    // Cut
    else if (operation == 2) 
    {
        // max(a,-b)
        if (-dstSec > dst) 
        {
            dst = -dstSec;
            color = colSec;
        }
    }
    // Mask
    else if (operation == 3) 
    {
        // max(a,b)
        if (dstSec > dst) 
        {
            dst = dstSec;
            color = colSec;
        }
    }

    return float4(color, dst);
}

float get_distance(Shape shape, float3 eye) 
{
    if (shape.shapeType == 0) 
    {
        return SphereDistance(eye, shape.position, shape.size.x);
    }
    else if (shape.shapeType == 1) 
    {
        return CubeDistance(eye, shape.position, shape.size);
    }

    return maxDistance;
}

float4 get_texel(float3 eye) 
{
    float globalDistance = maxDistance;
    float3 globalColor = 1;
    
    for (int i = 0; i < numShapes; i ++) 
    {
        Shape shape = shapes[i];
        int numChildren = shape.numChildren;

        float localDst = get_distance(shape,eye);
        float3 localColor = shape.color;

        for (int j = 0; j < numChildren; j++) 
        {
            Shape childShape = shapes[i+j+1];
            float childDst = get_distance(childShape,eye);

            float4 combined = Combine(localDst, childDst, localColor, childShape.color, childShape.operation, childShape.blendStrength);
            localColor = combined.xyz;
            localDst = combined.w;
        }
        i+=numChildren; // skip over children in outer loop
        
        float4 globalCombined = Combine(globalDistance, localDst, globalColor, localColor, shape.operation, shape.blendStrength);
        globalColor = globalCombined.xyz;
        globalDistance = globalCombined.w;        
    }

    return float4(globalColor, globalDistance);
}

float3 get_normal(float3 p) 
{
    float x = get_texel(float3(p.x + eps, p.y, p.z)).w - get_texel(float3(p.x - eps, p.y, p.z)).w;
    float y = get_texel(float3(p.x, p.y + eps, p.z)).w - get_texel(float3(p.x, p.y - eps, p.z)).w;
    float z = get_texel(float3(p.x, p.y, p.z + eps)).w - get_texel(float3(p.x, p.y, p.z - eps)).w;

    return normalize(float3(x, y, z));
}

float get_shadow(Ray ray, float dstToShadePoint) 
{
    float rayDst = 0;
    int marchSteps = 0;
    float shadowIntensity = .2;
    float brightness = 1;

    while (rayDst < dstToShadePoint) 
    {
        marchSteps++;
        float4 data = get_texel(ray.origin);
        float dst = data.w;
        
        if (dst <= eps) 
        {
            return shadowIntensity;
        }

        brightness = min(brightness, dst*200);

        ray.origin += ray.direction * dst;
        rayDst += dst;
    }

    return shadowIntensity + (1-shadowIntensity) * brightness;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Destination.GetDimensions(width, height);

    Destination[id.xy] = Source[id.xy];

    float2 uv = id.xy / float2(width, height) * 2 - 1;
    float rayDst = 0;

    Ray ray = trace_ray(uv);
    int marchSteps = 0;

    while (rayDst < maxDistance) 
    {
        marchSteps++;
        float4 data = get_texel(ray.origin);
        float dst = data.w;
        
        if (dst <= eps) 
        {
            float3 pointOnSurface = ray.origin + ray.direction * dst;
            float3 normal = get_normal(pointOnSurface - ray.direction * eps);
            float3 lightDir = (positionLight) ? normalize(_Light - ray.origin) : -_Light;
            float lighting = saturate(saturate(dot(normal, lightDir)));
            float3 col = data.xyz;
            
            // Shadow
            float3 offsetPos = pointOnSurface + normal * shadowBias;
            float3 dirToLight = (positionLight) ? normalize(_Light- offsetPos) : -_Light;

            ray.origin = offsetPos;
            ray.direction = dirToLight;

            float dstToLight = (positionLight) ? distance(offsetPos,_Light) : maxDistance;
            float shadow = get_shadow(ray, dstToLight);

            Destination[id.xy] = float4(col * lighting * shadow ,1);

            break;
        }

        ray.origin += ray.direction * dst;
        rayDst += dst;
    }
}
